---
layout:     post
title:      "debugging in mixed C# and MinGW. Thread bugs and Logging"
subtitle:   "Hello World, Hello Blog"
date:       2016-11-06 12:00:00
author:     "comicfans"
tags:
    - debug
---


&emsp;&emsp;Sometimes you may write your UI in C#, but low level code in C/C++, that makes C/C++ debugging difficult ,  especially C# compiled by MS dotnet, but C/C++ compiled by ...Mingw.

&emsp;&emsp;Why not using MSVC ?  because C/C++ codebase and many third party libraries mainly developed under Linux/GCC environment, not friendly to MSVC, port all of them spent too much time. That's situation I'm facing. so what I have to do is just to debug the mixed binary if something goes wrong...

  MSVC didn't understood DWARF (which mingw used for storing debugging symbols) , so I have no choice but GDB . problem is that GDB catch the segment fault SIGNAL in C/C++ code , but can not decode stack correctly ! it just shows all stack as ?? . So you got nothing. with some google and try, I've found something which may help.

  First is cv2pdb(https://github.com/rainers/cv2pdb) , it can convert DWARF to pdb  format(which MSVC can understand), so you can debug whole application in MSVC, but not very  precisely , anyway  you can get filename and line number (you may need to look around to find the crash line).  but this process will change the executable file itself, makes  GDB debug impossible. I also have some testcase written in C/C++,  so I must keep two version files, one for MSVC, another for GDB . finally I gave up this ,and found another useful tool .

  DebugDiag 2 from Microsoft, it's a free tool which can analyze Leak/Crash of C/C++/C# application, most important , I found it's report can show backtrace of MinGW compile binary ! to use it ,you can use GDB to start application and trigger crash, when crash catched by GDB,  keep it , then get a full dump. this can be done by run "procdump -ma YourCrashingAppName" (procdump also available from MS ,freely) . then you got a dump file (maybe very large ,depends on your application memory use), now you can use DebugDiag 2 to run a analyze on that (use Crash/Hang analyze).


  actually it didn't show correct function and line number, but in form of

   

libglib_2_0_0!g_free+19


but you can get the exactly line number with help of nm and addr2line (comes from your MinGW) this line divides to three part : libglib_2_0_0 is dll name ,you should find libglib-2.0-0.dll loaded by your application. g_free is the base function

      

      
