Data

Right now we have control-flow graph language , which describe steps precisely , but during its execution, Computer also needs "Data Storage" to be described precisely. Now we need to complete our control-flow language with precise data description.

All data you're processing is called 

 *variable*

It has same meanings as your Physical formula ,for example

d =v * t

variable d for distance , v for velocity , t for time. 

you have a variable ,and you reference it by its name.


Depends on length the data is needed , Data Storage property fail into two catalogs: 

1.static size: we know how much storage is needed even before actual execute, for example when calculate sum of lots of numbers, we only need to remember one sum.

Let's take a simple example: tell if a number N is prime number , we need to divide N from 2 to N-1 , if any of these number divides N without a remainder, N is not prime, otherwise it is.

    got a variable to store current integer we will add, called 'divisor' ,initialize as 2

    Loop Condition: divisor <= N-1
         Loop body: remainder = N / divisor, 
                  if remainder is 0, N is prime, stop
                  else divisor+1, continue loop



2.dynamic size: we can only know storage requirements during execution, for example to save user's name , it may have difference length.

To better understood the programming flow , instead of get into detail of programming language, we reference dynamic storage as a "storage bag", it can contains any length of numbers, you can

1. tell if a number already in bag
2. add a number into bag
3. remove a number from bag
4. iterate all number in bag (Loop over a bag)

Let's take first dynamic storage example: find all prime numbers which less than N, to achieve this ,we can iterate numbers from 1 to N, for every number, using previously method to tell if this number is prime. Then adding every prime to bag

    got a empty dynamic bag to store all primes, which named "primes"
    got a vriable to store current test number, which named "current", initialize as 2

    Loop Condition: current <= N
         Loop body: test if current is prime using previously method
                    if current is prime, add current to primes bag
                    else do nothing
                    current+1, continue loop
    now primes bag contains results

Second example: calculate sum of all prime numbers from previous example

    got a variable to store the sum, which is called 'sum', initialize as 0
    for each number 'p' inside primes bag:
        sum = sum + n
      

# more about digitalized

Until now , we just use storage bag to saving numbers, nothing interesting. But in real program, number bag can be almost "everything", for example a picture is just a VERY-big number bag. How computer save a picture as number bag ? Let's take a single "color point" first.

Most color can be made up by three components: Red Green and Blue, or RGB for short, for every component, we can define its strength from min~max (most computer use 0~255 for this range), so we can represent a color as 3 numbers, for example 

picture 255,255,255 

Now we divide a picture into a 2D grid ,which made up by X * Y units, we increasing X and Y, so the grid unit size is small enough, until color inside a grid unit is (almost) the same, then we convert the color in every unit to RGB 3-numbers, we save these numbers of 2D grid inside a number bag , now we got a "digitalized picture", in form of "number bag"


You can also generate a picture by creating this number bag, even with random numbers. Program can also generate many incredible pictures, which impossible to be seen from natural. 


Mantbroate set
